#!/usr/bin/python

from __future__ import division
from __future__ import print_function

import sys
import simulation as sim
import numpy as np
import multiprocessing as mp
from multiprocessing import Pool, freeze_support
import itertools
from itertools import permutations as permu
from itertools import combinations as combi
import time
import datetime

def simulatePllNetwork(topology, F, Nsteps, dt, c, Fc, F_Omeg, K, N, k, delay, phiS, phiM, isPlottingTimeSeries=False):
	''' Simulation of Network '''
	phi = sim.simulateNetwork(N,F,F_Omeg,K,Fc,delay,dt,c,Nsteps,topology,phiS, phiM)

	''' KURAMOTO ORDER PARAMETER '''
	r = sim.oracle_mTwistOrderParameter(phi[-int(2*1.0/(F*dt)):, :], k)			# calculate the m-twist order parameter for a time interval of 2 times the eigenperiod
	orderparam = sim.oracle_mTwistOrderParameter(phi[:, :], k)					# calculate the m-twist order parameter for all times
	#print('mean of modulus of the order parameter, R, over 2T:', np.mean(r), ' last value of R', r[-1])

	''' PLOT PHASE & FREQUENCY TIME SERIES '''
	if isPlottingTimeSeries:
		plotTimeSeries(phi, F, dt, orderparam, k, delay, F_Omeg, K)

	''' RETURN '''																# return value of mean order parameter, last order parameter, and the variance of r during the last 2T_{\omega}
	return np.mean(r), r[len(r)-1], np.var(r)

def multihelper(phiSr, initPhiPrime0, topology, F, Nsteps, dt, c, Fc, F_Omeg, K, N, k, delay, phiM, plot_Phases_Freq):
	if N > 2:
		phiSr = np.insert(phiSr, 0, initPhiPrime0)								# insert the first variable in the rotated space, constant initPhiPrime0
	phiS = rotate_phases(phiSr, isInverse=False)								# rotate back into physical phase space
	return simulatePllNetwork(topology, F, Nsteps, dt, c, Fc, F_Omeg, K, N, k, delay, phiS, phiM, plot_Phases_Freq)

def multihelper_star(dynparam_fixparam):
	return multihelper(*dynparam_fixparam)

''' MAIN '''
if __name__ == '__main__':
	''' MAIN:

	N		  : integer
				number of oscillators

	topology  : string
		global: fully connected network
		ring  : a 1D-ring (closed boundary conditions)
		chain :	a 1D-chain (open boundary conditions)

		!sqrt(N) needs to be an integer
		square:
		hexagon:
		octagon:
	Fc		   : cut-off frequency of the low-pass LF
	F_Omeg     : frequency of state of initial history
	K          : sensetivity of the PLLs

	k		   : integer 0 <= k <= N-1
				 k-Twist

	delay	   : float

	phiS	   : np.array
				 real-valued 2d matrix or 1d vector of phases
				 in the 2d case the columns of the matrix represent the individual oscillators

	Returns
	-------
	0 		   :  phi0 is not stable for specified k-Twist
	1		   :  phi0 is stable for specified k-Twist	'''

	''' SIMULATION PARAMETER'''

	mode = int(1);																# mode=0 -> algorithm usage mode, mode=1 -> single realization mode,
																				# mode=2 -> brute force scanning mode for parameter interval scans
	multiproc = True															# for multiprocessing set to True (brute-force mode 2)
	paramDiscretization = 50													# discretization for brute force scan in rotated phase space with phi'_k

	F = 1.0																		# free-running frequency of the PLLs
	c = 1.0E-9																	# phase noise parameter

	Fsim = 100.0*F																# simulate phase model with given sample frequency -- goal: about 100 samples per period

	Tsim = 150.0*(1.0/F)  														# simulation time in multiples of the period of the uncoupled oscillators
	dt = 1.0/Fsim
	Nsteps = int(round(Tsim*Fsim)) 												# calculate number of iterations -- add output?
	# Tsim = 250.0*delay 														# simulation time in multiples of the delay
	# K = 0.25 																	# sensitivity of the PLLs
	# Fc = 0.1																	# cut-off frequency of the low-pass LF
	# delay = 0.5																# transmission delay between coupled PLLs

	now = datetime.datetime.now()
	if mode == 0:
		# print('algorithm mode (Josefine)')
		# process arguments -- provided on program call, e.g. python oracle.py [arg0] [arg1] ... [argN], call, e.g.: oracle.py ring 3 1 0.25 0.1 1.15 1 1. 1. 1. 0.0 0.0 0.0
		topology = str(sys.argv[1])
		N = int(sys.argv[2])
		k = int(sys.argv[3])
		K = float(sys.argv[4])
		Fc = float(sys.argv[5])
		delay = float(sys.argv[6])
		F_Omeg = float(sys.argv[7])
		Tsim = float(sys.argv[8])
		# phiSr are the phases in the rotated phase space that perturb the synchronized state of interest during the initial history defined in [-tau, 0] at -dt (additive)
		phiSr = np.asarray([float(phi) for phi in sys.argv[9:(9+N)]])

		# choose the value of phi'_0, i.e., where the plane, rectangular to the axis phi'_0 in the rotated phase space, is placed; this direction corresponds to the case where all phi_k
		# in the original phase space are equal phi_0==phi_1==...==phi_N-1 or (all) have constant phase differences; if unequal from zero, that causes a global phase shift in the history
		initPhiPrime0 = 0.0
		# we rotated the original phase space such that along the (new) phi'_0 axis all phase differences remain equal and keep the associated phase constant,
		# considering only the perpendicular plane spanned by phi'_1, phi'_2, ..., phi'_N; if non-zero however, it introduces a global phase shift into the history, implying a different history
		phiSr[0] = initPhiPrime0
		Nsteps = int(round(Tsim*Fsim)) 											# calculate number of iterations -- add output?
		# if looking for m-twists, this variable holds the phase difference between neighboring oscillators in a stable m-twist state
		twistdelta = ( 2.0 * np.pi * k / (1.0*N) )
		if k == 0:
			phiM = np.zeros(N)
		else:
			phiM = np.arange(0.0, N*twistdelta, twistdelta)						# vector mit N entries from 0 increasing by twistdelta for every element, i.e., the phase-configuration
																				# in the original phase space of an m-twist solution
		phiS = rotate_phases(phiSr, isInverse=False)							# rotate initial phases into physical phase space of phases for simulation
		# check input values -- we only want to check in a 2pi periodic interval [phiS'-pi, phiS'+pi] (for all phiS) around each solution in phase-space
		# with that we are using the periodicity of m-twist solutions in the phase-space of phases (rotated phase space!)
		if any(phiSr[:]<-np.pi) | any(phiSr[:]> np.pi):
			print(0)
		else:
			print(simulatePllNetwork(topology, F, Nsteps, dt, c, Fc, F_Omeg, K, N, k, delay, phiS, phiM, False))

	if mode == 1:  																# single realization mode
		print('test single evaluation and plot phase and frequency time series, PROVIDE initial condition in ROTATED phase space!')
		print('total simulation time in multiples of the eigentfrequency:', int(Tsim*F),'\n')
		plot_Phases_Freq = True										  			# plot phase time series for this realization
		# process arguments -- provided on program call, e.g. python oracle.py [arg0] [arg1] ... [argN]
		topology = str(sys.argv[1])												# topology: {global, chain, ring, square lattice, hexagonal lattice, osctagon}
		N = int(sys.argv[2])													# number of oscillators
		K = float(sys.argv[3])													# coupling strength
		Fc = float(sys.argv[4])													# cut-off frequency of the loop filter
		delay = float(sys.argv[5])												# signal transmission delay
		F_Omeg = float(sys.argv[6])												# frequency of the synchronized state under investigation - has to be obtained before
		k = int(sys.argv[7])													# twist-number, specifies solutions of interest, important for setting initial conditions
		phiSr = np.asarray([float(phi) for phi in sys.argv[8:(8+N)]]) 			# this input allows to simulate specific points in !rotated phase space plane
		twistdelta = ( 2.0 * np.pi * k / ( float( N ) ) )						# phase difference between neighboring oscillators in a stable m-twist state
		# print('phase differences of',k,'-twist:', twistdelta, '\n')
		if k == 0:
			phiM = np.zeros(N)													# phiM denotes the unperturbed initial phases according to the m-twist state under investigation
		else:
			phiM = np.arange(0.0, N*twistdelta, twistdelta)						# vector mit N entries from 0 increasing by twistdelta for every element, i.e., the phase-configuration
																				# in the original phase space of an m-twist solution
		# choose the value of phi'_0, i.e., where the plane, rectangular to the axis phi'_0 in the rotated phase space, is placed
		# this direction corresponds to the case where all phi_k in the original phase space are equal phi_0==phi_1==...==phi_N-1 or (all) have constant phase differences
		initPhiPrime0 = 0.0
		print('shift along the first axis in rotated phase space, equivalent to phase kick of all oscillators before simulation starts: phi`_0=', initPhiPrime0)
		phiSr[0] = initPhiPrime0							  					# set value of the first dimension, phi'_0, the axis along which all phase differences are preserved
		print('\nvalues of the initial phases in ROTATED phase space, i.e., last time-step of history set as initial condition:', phiSr)
		phiS = rotate_phases(phiSr, isInverse=False)		  					# rotate back into physical phase space for simulation
		print('values of initial phase in ORIGINAL phase space:', phiS, '\n')

		t0 = time.time()
		results = simulatePllNetwork(topology, F, Nsteps, dt, c, Fc, F_Omeg, K, N, k, delay, phiS, phiM, plot_Phases_Freq) # initiates simulation and saves result in results container
		print('time needed for execution of simulation: ', (time.time()-t0), ' seconds')

		plt.show()
		''' SAVE RESULTS '''
		np.savez('results/orderparam_%d_%d_%d.npz' %(now.year, now.month, now.day), results=results)
		np.savez('results/initialperturb_%d_%d_%d.npz' %(now.year, now.month, now.day), phiS=phiS)

	if mode == 2:  																# scan through paramters with given discretization - in rotated phase space, for N oscillators
		print('test & brute force mode with evaluation')
		# process arguments -- provided on program call, e.g. python oracle.py [arg0] [arg1] ... [argN]
		topology = str(sys.argv[1])
		N = int(sys.argv[2])
		K = float(sys.argv[3])
		Fc = float(sys.argv[4])
		delay = float(sys.argv[5])
		F_Omeg = float(sys.argv[6])
		k = int(sys.argv[7])
		Tsim = float(sys.argv[8])												# provide the multiples of the intrinsic frequencies for which the simulations runs
		Tsim = Tsim*(1.0/F)
		Nsteps = int(round(Tsim*Fsim)) 											# calculate number of iterations
		print('total simulation time in multiples of the eigentfrequency:', int(Tsim*F),'\n')

		plot_Phases_Freq = False												# whether or not the phases and frequencies are being plotted
		# choose the value of phi'_0, i.e., where the plane, rectangular to the axis phi'_0 in the rotated phase space, is placed
		# this direction corresponds to the case where all phi_k in the original phase space are equal phi_0==phi_1==...==phi_N-1 or (all) have constant phase differences
		initPhiPrime0 = ( 0.0 * np.pi )
		if N > 2:
			print('shift along the first axis in rotated phase space, equivalent to phase kick of all oscillators before simulation starts: phi`_0=', initPhiPrime0)

		twistdelta = ( 2.0 * np.pi * k / float(N) )								# phase difference between neighboring oscillators in a stable m-twist state
		#print('phase differences of',k,'-twist:', twistdelta, '\n')
		if k == 0:
			phiM = np.zeros(N)													# vector mit N entries from 0 increasing by twistdelta for every element, i.e., the initial phase-configuration
		else:																	# in the original phase space
			phiM = np.arange(0.0, N*twistdelta, twistdelta)
			#print('phiM = ', phiM, '\n')
		phiMr = rotate_phases(phiM, isInverse=True)								# calculate phiM in terms of rotated phase space
		# print('phiR =', phiR, '\n')

		if N > 2:
			phiMr[0] = initPhiPrime0											# set first dimension in rotated phase space constant for systems of more than 2 oscillators
			#print('phiMr =', phiMr, '\n')
		# the space about each twist solution is scanned in [phiM-pi, phiM+pi] where phiM are the initial phases of the m-twist under investigation
		if N==2:
			scanValues = np.zeros((N,paramDiscretization), dtype=np.float)		# create container for all points in the discretized rotated phase space, +/- pi around each dimension (unit area)
			for i in range (0, N):												# the different coordinates of the solution, discretize an interval +/- pi around each variable
				scanValues[i,:] = np.linspace(phiMr[i]-np.pi, phiMr[i]+np.pi, paramDiscretization) # all entries are in rotated, and reduced phase space
				#print('row', i,'of matrix with all intervals of the rotated phase space:\n', scanValues[i,:], '\n')


			_allPoints = itertools.product(*scanValues)
			allPoints = list(_allPoints)										# scanValues is a list of lists: create a new list that gives all the possible combinations of items between the lists
			allPoints = np.array(allPoints) 									# convert the list to an array
		else:
			# setup a matrix for all N-1 variables but the first, which is set later
			scanValues = np.zeros((N-1,paramDiscretization), dtype=np.float)	# create container for all points in the discretized rotated phase space, +/- pi around each dimension (unit area)
			for i in range (0, N-1):											# the different coordinates of the solution, discretize an interval plus/minus pi around each variable
				scanValues[i,:] = np.linspace(phiMr[i+1]-np.pi, phiMr[i+1]+np.pi, paramDiscretization) # all entries are in rotated, and reduced phase space
				#print('row', i,'of matrix with all intervals of the rotated phase space:\n', scanValues[i,:], '\n')


			_allPoints = itertools.product(*scanValues)
			allPoints = list(_allPoints)										# scanValues is a list of lists: create a new list that gives all the possible combinations of items between the lists
			allPoints = np.array(allPoints) 									# convert the list to an array
		#print( 'all points in rotated phase space:\n', allPoints, '\n type:', type(allPoints), '\n')
		#print(_allPoints, '\n')
		#print(itertools.product(*scanValues))

		t0 = time.time()
		if multiproc:															# multiprocessing option for parameter sweep calulcations
			if N == 2:
				print('multiprocessing', paramDiscretization**N, 'realizations')
			else:
				print('multiprocessing', paramDiscretization**(N-1), 'realizations')
			results=[]
			freeze_support()
			pool = Pool(processes=8)											# create a Pool object
			#results.append( counter( pool.map(multihelper_star, itertools.izip( # this makes a map of all parameter combinations that have to be simulated, itertools.repeat() names the constants
			#					itertools.product(*scanValues), itertools.repeat(initPhiPrime0), itertools.repeat(topology), itertools.repeat(F), itertools.repeat(Nsteps), itertools.repeat(dt),
			#					itertools.repeat(c),itertools.repeat(Fc), itertools.repeat(F_Omeg), itertools.repeat(K), itertools.repeat(N), itertools.repeat(k), itertools.repeat(delay),
			#					itertools.repeat(phiM), itertools.repeat(plot_Phases_Freq) ) ), len(results) ) )
			results.append( pool.map(multihelper_star, itertools.izip( 			# this makes a map of all parameter combinations that have to be simulated, itertools.repeat() names the constants
								itertools.product(*scanValues), itertools.repeat(initPhiPrime0), itertools.repeat(topology), itertools.repeat(F), itertools.repeat(Nsteps), itertools.repeat(dt),
								itertools.repeat(c),itertools.repeat(Fc), itertools.repeat(F_Omeg), itertools.repeat(K), itertools.repeat(N), itertools.repeat(k), itertools.repeat(delay),
								itertools.repeat(phiM), itertools.repeat(plot_Phases_Freq) ) ) )
			results = results[0]
			#print( list( pool.map(multihelper_star, itertools.izip( 			# this makes a map of all parameter combinations that have to be simulated, itertools.repeat() names the constants
			#					itertools.product(*scanValues), itertools.repeat(initPhiPrime0), itertools.repeat(topology), itertools.repeat(F), itertools.repeat(Nsteps), itertools.repeat(dt),
			#					itertools.repeat(c),itertools.repeat(Fc), itertools.repeat(F_Omeg), itertools.repeat(K), itertools.repeat(N), itertools.repeat(k), itertools.repeat(delay),
			#					itertools.repeat(phiM), itertools.repeat(plot_Phases_Freq) ) ) ) )
			print('CHECK whether results are returned in the right order!!!')
			#print('results:', results)
			print('time needed for execution of simulations in multiproc mode: ', (time.time()-t0), ' seconds')
		else:
			results=[]															# prepare container for results of simulatePllNetwork
			for i in range (allPoints.shape[0]):								# iterate through all points in the N-1 dimensional rotated phase space
				print('calculation #:', i+1, 'of', allPoints.shape[0])
				#print( allPoints[i], '\n')
				#print( 'type of allPoints[i]', type(allPoints[i]))
				#print( 'allPoints[i] =', allPoints[i], '\n')
				phiSr = allPoints[i,:]											# go through all combinations of points in the discretized rotated phase space
				if N > 2:
					phiSr = np.insert(phiSr, 0, initPhiPrime0)					# insert the first variable in the rotated space, constant initPhiPrime0
				print( 'phiSr =', phiSr, '\n')
				phiS = rotate_phases(phiSr, isInverse=False)					# rotate back into physical phase space
				#print( 'type of phiS', type(phiS))
				#print( 'type of initPhiPrime0', type(initPhiPrime0))
				#print( 'phiS = ', phiS, '\n')
				results.append( list( simulatePllNetwork(topology, F, Nsteps, dt, c, Fc, F_Omeg, K, N, k, delay, phiS, phiM, plot_Phases_Freq) ) )
				#print( list( simulatePllNetwork(topology, Fc, F_Omeg, K, N, k, delay, phiS, phiM, plot_Phases_Freq) ) )
			print('results:', results)
			print('time needed for execution of simulations sequentially: ', (time.time()-t0), ' seconds')

		results = np.array(results)
		#print( 'the results:\n', results, '\n type:', type(results), '\n')
		#print( 'first value in results:\n', results[0], '\n type:', type(results[0]), '\n')
		#print( np.array(results))

		''' SAVE RESULTS '''
		np.savez('results/orderparam_%d_%d_%d.npz' %(now.year, now.month, now.day), results=results)
		np.savez('results/allInitPerturbPoints_%d_%d_%d.npz' %(now.year, now.month, now.day), allPoints=allPoints)

		''' EXTRA EVALUATION '''
		doEvaluation(Fc, F_Omeg, K, N, k, delay, twistdelta, results, allPoints)

