#!/usr/bin/python

from __future__ import division
from __future__ import print_function





def doEvaluation(Fc, F_Omeg, K, N, k, delay, twistdelta, results, allPoints):
	''' Here addtional output, e.g., graphs or matrices can be implemented for testing '''
	# we want to plot all the m-twist locations in rotated phase space: calculate phases, rotate and then plot into the results
	twist_points  = np.zeros((N, N), dtype=np.float)							# twist points in physical phase space
	twist_pointsR = np.zeros((N, N), dtype=np.float)							# twist points in rotated phase space
	alltwistP = []
	now = datetime.datetime.now()

	if N == 2:																	# this part is for calculating the points of m-twist solutions in the rotated space, they are plotted later
		pass
	if N == 3:
		for i in range (N):
			twistdelta = ( 2.0*np.pi*i/(1.0*N) )
			twist_points[i,:] = np.array([0.0, twistdelta, 2.0*twistdelta]) 	# write m-twist phase configuation in phase space of phases
			# print(i,'-twist points:\n', twist_points[i,:], '\n')
			for m in range (-2,3):
				for n in range (-2,3):
					vtemp = twist_points[i,:] + np.array([0.0, 2.0*np.pi*m, 2.0*np.pi*n])
					alltwistP.append(vtemp)
					# print('vtemp:', vtemp, '\n')

		alltwistP = np.array(alltwistP)
		# print('alltwistP:\n', alltwistP, '\n')
		alltwistPR= np.transpose(rotate_phases(np.transpose(alltwistP), isInverse=True))	# rotate the points into rotated phase space
		# print('alltwistP rotated (alltwistPR):\n', alltwistPR, '\n')

	print('IMPORTANT: check plots, phi1 phi2 axis... different between imshow and scatter plot cases')

	''' PLOTS '''
	plt.figure(1)																#
	plt.clf()
	plt.scatter(allPoints[:,0], allPoints[:,1], c=results[:,0], alpha=0.5, edgecolor='')
	plt.title(r'mean $R(t,m)$, constant dim: $\phi_0^{\prime}=%.2f$' % initPhiPrime0)
	plt.xlabel(r'$\phi_1^{\prime}$')
	plt.ylabel(r'$\phi_2^{\prime}$')
	plt.xlim([1.05*allPoints[:,0].min(), 1.05*allPoints[:,0].max()])
	plt.ylim([1.05*allPoints[:,1].min(), 1.05*allPoints[:,1].max()])
	plt.colorbar()
	if N==3:
		plt.plot(alltwistPR[:,1],alltwistPR[:,2], 'yo', ms=8)
	plt.savefig('results/rot_red_PhaseSpace_meanR_%d_%d_%d.pdf' %(now.year, now.month, now.day))
	plt.savefig('results/rot_red_PhaseSpace_meanR_%d_%d_%d.png' %(now.year, now.month, now.day), dpi=200)

	plt.figure(2)
	plt.clf()
	plt.scatter(allPoints[:,0], allPoints[:,1], c=results[:,1], alpha=0.5, edgecolor='')
	plt.title(r'last $R(t,m)$, constant dim: $\phi_0^{\prime}=%.2f$' % initPhiPrime0)
	plt.xlabel(r'$\phi_1^{\prime}$')
	plt.ylabel(r'$\phi_2^{\prime}$')
	plt.xlim([1.05*allPoints[:,0].min(), 1.05*allPoints[:,0].max()])
	plt.ylim([1.05*allPoints[:,1].min(), 1.05*allPoints[:,1].max()])
	plt.colorbar()
	if N==3:
		plt.plot(alltwistPR[:,1],alltwistPR[:,2], 'yo', ms=8)
	plt.savefig('results/rot_red_PhaseSpace_lastR_%d_%d_%d.pdf' %(now.year, now.month, now.day))
	plt.savefig('results/rot_red_PhaseSpace_lastR_%d_%d_%d.png' %(now.year, now.month, now.day), dpi=200)

	plt.figure(3)
	plt.clf()
	tempresults = results[:,0].reshape((paramDiscretization, paramDiscretization))   #np.flipud()
	tempresults = np.transpose(tempresults)
	plt.imshow(tempresults, interpolation='nearest', cmap=cm.coolwarm, aspect='auto', origin='lower', extent=(allPoints[:,0].min(), allPoints[:,0].max(), allPoints[:,1].min(), allPoints[:,1].max()), vmin=0, vmax=1)
	plt.title(r'mean $R(t,m)$, constant dim: $\phi_0^{\prime}=%.2f$' % initPhiPrime0)
	plt.xlabel(r'$\phi_1^{\prime}$')
	plt.ylabel(r'$\phi_2^{\prime}$')
	plt.colorbar()
	if N==3:
		plt.plot(alltwistPR[:,1],alltwistPR[:,2], 'yo', ms=8)
		plt.xlim([1.05*allPoints[:,0].min(), 1.05*allPoints[:,0].max()])
		plt.ylim([1.05*allPoints[:,1].min(), 1.05*allPoints[:,1].max()])
	plt.savefig('results/imshow_PhaseSpace_meanR_%d_%d_%d.pdf' %(now.year, now.month, now.day))
	plt.savefig('results/imshow_PhaseSpace_meanR_%d_%d_%d.png' %(now.year, now.month, now.day), dpi=1000)

	plt.figure(4)
	plt.clf()
	tempresults = results[:,1].reshape((paramDiscretization, paramDiscretization))   #np.flipud()
	tempresults = np.transpose(tempresults)
	plt.imshow(tempresults, interpolation='nearest', cmap=cm.coolwarm, aspect='auto', origin='lower', extent=(allPoints[:,0].min(), allPoints[:,0].max(), allPoints[:,1].min(), allPoints[:,1].max()), vmin=0, vmax=1)
	plt.title(r'last $R(t,m)$, constant dim: $\phi_0^{\prime}=%.2f$' % initPhiPrime0)
	plt.title(r'last $R(t,m=)$, constant dim: $\phi_0^{\prime}=%.2f$' % initPhiPrime0)
	plt.xlabel(r'$\phi_1^{\prime}$')
	plt.ylabel(r'$\phi_2^{\prime}$')
	plt.colorbar()
	if N==3:
		plt.plot(alltwistPR[:,1],alltwistPR[:,2], 'yo', ms=8)
		plt.xlim([1.05*allPoints[:,0].min(), 1.05*allPoints[:,0].max()])
		plt.ylim([1.05*allPoints[:,1].min(), 1.05*allPoints[:,1].max()])
	plt.savefig('results/imshow_PhaseSpace_lastR_%d_%d_%d.pdf' %(now.year, now.month, now.day))
	plt.savefig('results/imshow_PhaseSpace_lastR_%d_%d_%d.png' %(now.year, now.month, now.day), dpi=1000)

	plt.draw()
	plt.show()

	return 0.0

''' PLOTS PHASE, FREQUENCY & ORDER PARAMETER '''
def plotTimeSeries(phi, F, dt, orderparam, k, delay, F_Omeg, K):
	now = datetime.datetime.now()

	t = np.arange(phi.shape[0])													# plot the phases of the oscillators over time
	plt.figure(9)
	plt.clf()
	plt.plot(phi)
	# print(np.arange(0,len(phi),2*np.pi*F_Omeg*dt))
	#plt.plot(phi[:,1]-2*np.pi*dt*F_Omeg*np.arange(len(phi)))					# plots the difference between the expected phase (according to Omega) vs the actual phase evolution
	plt.plot(int(round(delay/dt)), phi[int(round(delay/dt)),0], 'yo', ms=5)
	plt.axvspan(t[-int(2*1.0/(F*dt))], t[-1], color='b', alpha=0.3)
	plt.title(r'time series phases, $\dot{\phi}_0(t_{start})=%.4f$, $\dot{\phi}_0(t_{end})=%.4f$  [rad/Hz]' %( ((phi[2][0]-phi[1][0])/(dt)), ((phi[-4][0]-phi[-5][0])/(dt)) ) )
	plt.xlabel(r'$t$ in steps $dt$')
	plt.ylabel(r'$\phi(t)$')
	plt.savefig('results/phases-vs-time_%d_%d_%d.pdf' %(now.year, now.month, now.day))
	plt.savefig('results/phases-vs-time_%d_%d_%d.png' %(now.year, now.month, now.day), dpi=200)
	print(r'frequency of zeroth osci at the beginning and end of the simulation:, $\dot{\phi}_0(t_{start})=%.4f$, $\dot{\phi}_0(t_{end})=%.4f$  [rad/Hz]', ((phi[2][0]-phi[1][0])/(dt)), ((phi[-4][0]-phi[-5][0])/(dt)) )
	print('last values of the phases:\n', phi[-3:,:])

	#plot distribution of instantaneous frequencies for time invterval t-2tau bis t

	# print('the last entries of phi_0 or its derivative:', np.diff(phi[-4:, 0]))
	# print('\nphi check dimension, Doppelklammer', phi[-4:][0])				# CAREFUL HERE!!!, not always the same, the first case M=phi[-4:] is returned and then of this M, M[0] is taken
	# print('phi check dimension, Doppelklammer',   phi[-4:, 0], '\n')			# here
	#print('the last entries of phi_0', np.linspace(F-K, F+K, num=20) )

	plt.figure(10)																# plot a histogram of the frequencies of the oscillators over time
	plt.clf()
	lastfreqs = (np.diff(phi[-int(2*1.0/(F*dt)):, :], axis=0).flatten()/(dt))
	plt.hist(lastfreqs, bins=np.linspace(2*np.pi*(F-K), 2*np.pi*(F+K), num=21), rwidth=0.75 )
	plt.xlim((2*np.pi*(F-K), 2*np.pi*(F+K)))
	plt.title(r'mean frequency $\bar{f}=%.3f$ and variance $\sigma_f=%.3f$  [rad/Hz]' %( np.mean(lastfreqs), np.var(lastfreqs) ) )
	plt.xlabel(r'frequency bins [rad/s]')
	plt.ylabel(r'number')
	plt.savefig('results/freq_histo_%d_%d_%d.pdf' %(now.year, now.month, now.day))

	# plot phase modulo 2pi vs time
	# plt.figure(11)
	# plt.clf()
	# plt.plot(np.fmod(phi, 2.0*np.pi))
	# plt.plot(np.fmod(phi[:,1]-2*np.pi*dt*F_Omeg*np.arange(len(phi)),2*np.pi))
	# plt.title(r'time series phases modulo $2\pi$')
	# plt.axvspan(t[-int(2*1.0/(F*dt))], t[-1], color='b', alpha=0.3)
	# plt.xlabel(r'$t$ in steps $dt$')
	# plt.ylabel(r'$\phi(t)$')
	# plt.savefig('results/phases2pi-vs-time_%d_%d_%d.pdf' %(now.year, now.month, now.day))
	# plt.savefig('results/phases2pi-vs-time.png', dpi=150)

	plt.figure(12)																# plot the frequencies of the oscillators over time
	plt.clf()
	phidot = np.diff(phi, axis=0)/dt
	plt.plot(phidot)
	plt.plot(int(round(delay/dt)), phidot[int(round(delay/dt)),0], 'yo', ms=5)
	plt.axvspan(t[-int(2*1.0/(F*dt))], t[-1], color='b', alpha=0.3)
	# print(t[-int(2*1.0/(F*dt))], t[-1])
	plt.title(r'time series frequencies [rad Hz]')								# , last value in [Hz]: f_1 = %.3d' % (phi[-1][0]-phi[-2][0])/dt )
	plt.xlabel(r'$t$ in steps $dt$')
	plt.ylabel(r'$\dot{\phi}(t)$')
	plt.savefig('results/freq-vs-time_%d_%d_%d.pdf' %(now.year, now.month, now.day))
	plt.savefig('results/freq-vs-time_%d_%d_%d.png' %(now.year, now.month, now.day), dpi=200)

	# fig, ax = plt.subplots() 													# create a new figure with a default 111 subplot
	# phidot = np.diff(phi, axis=0)/dt
	# plt.title(r'time series frequencies [rad Hz]')								# , last value in [Hz]: f_1 = %.3d' % (phi[-1][0]-phi[-2][0])/dt )
	# plt.xlabel(r'$t$ in steps $dt$')
	# plt.ylabel(r'$\dot{\phi}(t)$')
	# ax.plot(phidot)
	# plt.plot(int(round(delay/dt)), phidot[int(round(delay/dt)),0], 'yo', ms=5)
	# plt.axvspan(t[-int(2*1.0/(F*dt))], t[-1], color='b', alpha=0.3)
	# axins = zoomed_inset_axes(ax, 5, loc=4) 									# zoom-factor: 2.5, location: 'best': 0, (only implemented for axes legends)
	# 																			# 'upper right': 1, 'upper left'  : 2, 'lower left'  : 3, 'lower right' : 4, 'right' : 5,
	# 																			# 'center left': 6, 'center right': 7, 'lower center': 8, 'upper center': 9, 'center': 10
	# axins.plot(phidot)
	# x1, x2, y1, y2 = t[-int((25/F)/dt)], t[-1], phidot[-1,0]-5*F, phidot[-1,0]+5*F	# specify the limits of the inset
	# print('inset coordinates: x1=', x1, 'x2=', x2, 'y1=', y1, 'y2=', y2)
	# axins.set_xlim(x1, x2) 														# apply the x-limits
	# axins.set_ylim(y1, y2) 														# apply the y-limits
	# plt.yticks(visiblesimulateNetwork=False)
	# plt.xticks(visible=False)
	# mark_inset(ax, axins, loc1=2, loc2=4, fc="none", ec="0.5")
	# print(t[-int(2*1.0/(F*dt))], t[-1])

	plt.figure(14)																# plot the order parameter in dependence of time
	plt.clf()
	plt.plot(orderparam)
	plt.plot(int(round(delay/dt)), orderparam[int(round(delay/dt))], 'yo', ms=5)
	plt.title(r'order parameter, with 1-$\bar{R}$=%.3e, and std=%.3e' %(1-np.mean(orderparam[-int(2*1.0/(F*dt)):]), np.std(orderparam[-int(2*1.0/(F*dt)):])) )
	plt.xlabel(r'$t$ in steps $dt$')
	plt.ylabel(r'$R( t,m = %d )$' % k)
	plt.savefig('results/orderParam-vs-time_%d_%d_%d.pdf' %(now.year, now.month, now.day))
	plt.savefig('results/orderParam-vs-time_%d_%d_%d.png' %(now.year, now.month, now.day), dpi=200)
	#print('\nlast entry order parameter: R-1 = %.3e' % (orderparam[-1]-1) )
	#print('\nlast entries order parameter: R = ', orderparam[-25:])

	plt.draw()
